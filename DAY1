How to do PreTest?
==========================
Ansible
Docker
https://www.devopsschool.com/blog/how-to-do-pre-test-and-post-test-using-devops-school-lms/

Contact@DevOpsSchool.com
========================
How to get started?
=====================================
Maven
Nexus
Ansible
Jenkins
Docker
Selenium 
Jmeter
============================================================
What is DevOps?
--------------------------------
    Immediate release 
    Quality redefine
    Cost Reduction
https://www.devopsschool.com/videos/387/complete-cicd-devops-implementation-from-scratch-using-jenkins-by-devopsschool/
================================
What are tools which needed in order to Learn and Practice DevOps?
========================================================
Prod - Prodx
Mgr - Mgrx
=======================
Architect - Rally - Jira - Sharepoint - Confluence
Coding - 10 Dev - 10 Module - 
        Code Integ ->  Git
        Code Review - 
                    Peer  - Pulse - Gitlab - gerrit - Github - Code Collabrator
                    Static - SonarQube
        Build mgmt  - Maven - MSBuild ---- PART OF THE TRAINING
        Unit Tesing - junit - nunit
        Pack mgmt   
                    App  - JAR
                    System - EXE - RPM
        Archive a pack - Nexus  ---- PART OF THE TRAINING
        Dep 2 
                Quality env
                Staging
                Pre Pred
                prod
        Prodx55.5 ---> 100 BOXES
        --------------------------
        1 Dep  ---- 9 mins
        100 Dep ----> 9 mins.
        ------------------------------
        100
                50 L - 50 W
                50 APACHE - 50 NGINX
                25 Tom - 25 Jbss - 25 WL - 25 WS
                25 MYSQL - 25 MSSWL - 25 ORALE - 25 PS
                100 DIff
        -----------------
        HOW??
        Parrell dep ----> 
        Programming -> Ansible      ---- PART OF THE TRAINING
        GUI -> uDeloy - Octopus Deploy

        -------------------
        100 Dep - 9 mins...
        --------------------
        1 SECOND -  DOCKER       ---- PART OF THE TRAINING

        --------------
        How do we get > 100 BOXES?????
        1 mins ----> 
        Cloud 
                    PUBLIC - AWS
                    PVT - Vmware
            
        AT 
                feature testing - Selenium      ---- PART OF THE TRAINING 
                performance - Jemter             ---- PART OF THE TRAINING


        Code Coverage - JACOCO 
        =============================
        Plan - Code - Review - Build - UT - Pack - Archive - Dep - AT - CC
        JIRA  - GIT - Sonar - maven - JUNIT - Jar - Nexus - Ansibke - Sel - JACOCO
        ========================================================================
                                    Jenkins

Day 1
==============
Maven
Nexus

Day 2
==============  
Ansible

Day 3
==============  
Docker

Day 4
==============  
Jenkins  + Sel + JME

==================================================================
What is Maven?
-------------------------------------
    Build Tool - WRONG.
    OPen Source Tool
    Free from APACHE
    Written in JAVA
    NEED JRE/JDK
    ALL PLATFORM
    Release 3.X
    Project mgmt tool
            Folder Strcuture of Code
            Compile
            UT
            Package
            Install
            Dependency mgmt
            mUltiple porjects
            Config
            Documents
            Reports
            Integration

Why Maven?
    Automated your project mgmt -- Build mgtm to save time.

Other tool
Makfile -> Ant - > Maven -> Gradle
MSBuild - NANT - PS

How to install Maven?
        Pre - JAVA and JAVA_HOME
        Copy a Maven.zip file
        Unzip it
        Keep it to some dir
        "SOME_diR"/bin ======> PATH


How to verify?
mvn
mvn -h
mvn -v
https://github.com/devopsschool-lab-exercise/DevOps-L-And-T-Tech-Blr-2020
http://bit.ly/2RQBQcm
    
=======================================================
Basic Workflow?
==============================
Humen Life Cycle
-----------------------------
BORN -->  KID --> TEEN  --> YOUNG --> MID -> OLD -> DIE

Maven has LIFECYCLE to manage PROJECT
=======================================
3 LIFE CYCLE 
        DEFAULT - 23 PHASES
        
        PHASES                  GOAL            POWERED by PLUGINS      FORMAT    
        -----------------------------------------------------------------
        compile                 compile         XXX                     plugins-name:compile
        test                    test
        package                 package
        install                 install
        deploy                  deploy

What is PLUGINS?
------------------------
plugins a feature.
Maven
    Core plugins - Dev by Maven Dev Team.
    External Plugins  - Dev  by EXTERNAL COmmunity 




        SITE  - 4 PHASES
        CLEAN - 3 PHASES
https://maven.apache.org/ref/3.6.3/maven-core/lifecycles.html


Q - What is Project name? - prodX
Q - What is my version - 1.0
Q - How to manage internal dep? --
Q - How to create a Skeltan of my project which would be followed by each team member?
-- archtype

mvn 
archetype:generate =====    plugins-name:goal
-DgroupId=com.msoffice.software  
-DartifactId=msword
-DarchetypeArtifactId=maven-archetype-quickstart 
-DarchetypeVersion=1.4
-DinteractiveMode=false

TYPE - maven-archetype-quickstart
https://maven.apache.org/archetypes/index.html

GroupId     == com.microsoft.software
    microsoft
        word                com.microsoft.software.word
        excel               com.microsoft.software.excel
        powerpoint          com.microsoft.software.powerpoint
        common
        frontpage


ArtifactId == word

Version 
        RELEASE - 3 3.4 3.4.1
        SNAPSHOT - 3-SNAPSHOT 3.4-SNAPSHOT 3.4.1-SNAPSHOT

Repository

Dependency mgmt
    internal
    external

Maven download a Dependency from
        LOCAL REPO ---> NOT FUND  ---> CENTRAL REPo ---> coPY TO LR and then use it.
------------------------------------------
        ~/.m2
C:\Users\Rajesh Kumar\.m2\repository
                               https://repo.maven.apache.org/maven2/

Maven STATEMENT
-------------------

Step - 1 - Create 1 Project Skelaton
mvn archetype:generate -DgroupId=com.prodx.software -DartifactId=chat -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
mvn archetype:generate -DgroupId=com.prodx.software -DartifactId=mail -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

Step - 2 - uNderstand Skelaton

Step - 3 - Become a DEV

Step - 4 - Become a QA

Step - 5- 
mvn compile
mvn test
mvn package
mvn install     COPY a JAR from TARGET to LOCAL REPO
mvn deploy      COPY a JAR from LOCAL REPO to Private Repo

What is pom.xml?
======================================
PROJECT OBJECT MODEL
XML file
        PROJECT SPEC
                GROUP ID
                ART ID
                VERSION
                COMPANY
                Dependency
                PLUGINS


Packagin
        Jar
        war
        ear
        pom                
====================================================
What is Nexus?
    To store package
            JAR - WAR - EAR 
            EXE
            DOCKER IMAGE
            PYTHON
            Node Pack
            RUBY Pack
            ANY PACK
    From SonaType
    Written in JAVA
    Release         
            COMMUNITY  - FREE BUT only for MAVEN + GENERIC
            PROFESSIONAL  - MANY TYPES
            https://www.sonatype.com/nexus-repository-oss-vs.-pro-features
    Release     
            3.x
Why NEXUS?
            Security 
            Availability
            Integrity
            Durability
            Easy Maintainance
            Implementing Process
            Role Based Access mgmt
            Integration
                    LDAP
                    Maven
                    JENKKINS

Sketch
        NEXUS   
                REPO(S)
                        Package
                                Version
                        UPLOADED - DOWNLOADED

Other tools - Arhciva - Nexus - Artifactory - Nuget

How to install Nexus?
Pre - https://help.sonatype.com/repomanager3/system-requirements

Install JRE or JDK
$ su -c "yum install java-1.8.0-openjdk"

Download Nexus for PRO
https://download.sonatype.com/nexus/3/latest-unix.tar.gz

Extract it and run it.

104.211.183.204
landt
landt$123d3kLjsg
landt$123d3kLjsg

=========================NEXUS================================
http://104.211.181.240:8081/
admin
Password$123

Basic Workflow of SonaType Nexus?
==========================================
Step1 - Create a access for Upload & Download suing RBAC.
- Privillage
- Role
- user
rajesh 
rajesh123

Step2 - Create a repo
KIND OF REPO - 
https://www.sonatype.com/nexus-repository-oss-vs.-pro-features

TYPES OF REPO
        HOSTED - READ and WRITE - LOCAL ONLY FOR SPEED - IN NEXUS SERVER
                RELEASE - rajesh-hosted  - http://104.211.181.240:8081/repository/rajesh-hosted/
                SNAPSHOT - rajesh-snapshot  - http://104.211.181.240:8081/repository/rajesh-snapshot/
        PROXY - READ ONLY - Always Copy of Remote Repo - Cacnhe in NEXUS
        Remote - https://repo.maven.apache.org/maven2/
        rajesh-proxy - http://104.211.181.240:8081/repository/rajesh-proxy/
        GROUP - HOSTED(S) +PROXY(S)
        rajesh-group  - http://104.211.181.240:8081/repository/rajesh-group/

        Maven Release 
                RELEASE
                SNAPSHOT

HOW TO UPLOAD A PACKAGE USING MAVEN TO NEXUS REPO???????????
Step 1 - Modify POM.Xml with REPO LOCATION SUING <Distributedmgmt> element

<distributionManagement>
	<repository>
		<id>manayta</id>
		<name>Internal Releases</name>
		<url>http://104.211.181.240:8081/repository/rajesh-hosted/</url>
	</repository>
 
	<snapshotRepository>
		<id>manayta</id>
		<name>Internal Releases</name>
		<url>http://104.211.181.240:8081/repository/rajesh-snapshot/</url>
	</snapshotRepository>
</distributionManagement>


Step 2 - Modify setting.xml with ACCESS OF NEXUS with  <Server> element

     <server>
      <id>manayta</id>
      <username>rajesh</username>
      <password>rajesh123</password>
    </server>


Step 3 - MAKE SURE THAT POM.Xml element ID and setting.xml element ID MUST MATCH

Step 4 - mvn deploy


SAMPLE REPO = https://github.com/devops-school/helloworld-java-maven

